!! Scraping Magic 

In this chapter we will scrap the web site of Magic the gathering and in particular the card database. (Yes I play Magic not super good but well I have fun). 
Here is one example *http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430*  as shown in Figure *@ligthouse2*.
Now we will try to show how we explore the HTML using the excellent Pharo inspector: diving in the tree nodes and checking live their attributes or children is simply super cool.



!!! First the visual 

First we would like to grab the visual because this is fun and cool. 

+http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430.>file://figures/arcane.png|width=100|label=ligthouse2+

[[[
| tree |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430') 
]]]	


!!! Toying with images

+Exploring images.>file://figures/magic1.png|width=100|label=image0+

[[[
| tree |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430').
tree xpath: '//img'	
]]]


When we open the card visual in a separate window we see that the url is *http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=389430&type=card*. Therefore we started to look for Handlers in the nodes as shown in Figure *@image0*.


!!!! No so cool but working... 

Toying with the inspector, we come up with the following ugly expression to get the name of the JPEG

[[[
| tree |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430').
((tree xpath: '//img') third @ 'src') first value allButFirst: 5
>>> 'Handlers/Image.ashx?multiverseid=389430&type=card'
]]]

!!! Revisiting it

We could not really show you such ugly expressions so we had to find a better one.

[[[
| tree |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430').
(tree xpath: '//img[@src]')
]]]

+Exploring images.>file://figures/magic2.png|width=100|label=image1+

+Exploring images.>file://figures/magic3.png|width=100|label=image2+

+Exploring images.>file://figures/magic4.png|width=100|label=image3+

[[[
| tree |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430').
(tree xpath: '//img[@src]') third attributeAt: 'src'
]]]

Now that we have the visual
[[[
| tree path |
tree := (XMLHTMLParser parseURL: 'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=389430').
path := ((tree xpath: '//img[@src]')	third attributeAt: 'src') allButFirst: 5.
(ZnEasy getJpeg: 'http://gatherer.wizards.com/',path) asMorph openInWorld
]]]

+Getting the card visual.>file://figures/magic5.png|width=100|label=image+

!!! Getting data

Since this web page is probably generated, we look for example for the artist string in the source and we found the following matches:

[[[
ClientIDs.artistRow = 'ctl00_ctl00_ctl00_MainContent_SubContent_SubContent_artistRow';
]]]

This one is more interesting:

[[[
<div id="ctl00_ctl00_ctl00_MainContent_SubContent_SubContent_artistRow" class="row">
   <div class="label">
       Artist:</div>
   <div id="ctl00_ctl00_ctl00_MainContent_SubContent_SubContent_ArtistCredit" class="value">
     <a href="/Pages/Search/Default.aspx?action=advanced&amp;artist=[%22Igor Kieryluk%22]">Igor Kieryluk</a></div>
]]]



We can build queries to identify node elements having this id. 
To avoid to perform an internet request each time, we typed directly XPath path in the XPath pane of the inspector as shown in Figure *@row*.
Now trying to get faster we looked at all the class="row"

[[[
//div[@class='row']
]]]

+Getting the card visual.>file://figures/magic6.png|width=100|label=row+
